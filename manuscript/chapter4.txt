## TortoiseSVN คืออะไร ##

## ติดตั้ง TortoiseSVN ##

1. เปิดเบราเซอร์ขึ้นมาแล้วไปที่ http://tortoisesvn.net/downloads.html 

2. คลิกเลือกว่าจะดาวน์โหลดเวอร์ชั่นไหนไปใช้ ขึ้นอยู่กับระบบปฎิบัติการของคุณว่าเป็นกี่บิต

    ![](images/chapter4/tortoisesvn_install_01.png)

3. ตัว TortoiseSVN นั้นถูกเก็บไว้ที่ Sourceforge รอสักครู่จะมีหน้าต่างดาวน์โหลดขึ้นมา

    ![](images/chapter4/tortoisesvn_install_02.png)

4. บันทึกไฟล์เก็บไว้ที่ไหนสักแห่ง ที่จะเรียกใช้งานได้ง่ายๆ 

    ![](images/chapter4/tortoisesvn_install_03.png)

5. ดับเบิลคลิกไฟล์ TortoiseSVN ที่ดาวน์โหลดมา เพื่อทำการติดตั้ง

    ![](images/chapter4/tortoisesvn_install_04.png)

6. เข้าสู่กระบวนการติดตั้ง คลิก Next 

    ![](images/chapter4/tortoisesvn_install_05.png)

7. คลิกเลือก I accept the term in the License Agreement ยอมรับเงื่อนไขการใช้งาน จากนั้นคลิกปุ่ม Next

    ![](images/chapter4/tortoisesvn_install_06.png)

8. ไม่ต้องเปลี่ยนแปลงค่าอะไร ปล่อยไปตาม Default คลิกปุ่ม Next 

    ![](images/chapter4/tortoisesvn_install_07.png)

9. คลิก Next 

    ![](images/chapter4/tortoisesvn_install_08.png)

10. โปรแกรม TortoiseSVN กำลังติดตั้ง ช่วงนี้ทำได้แค่รอ

    ![](images/chapter4/tortoisesvn_install_09.png)

11. หลังจากรอได้สักครู่ โปรแกรมก็ทำการติดตั้งเสร็จเรียบร้อย ให้คลิกปุ่ม Finish เสร็จสิ้นการติดตั้ง

    ![](images/chapter4/tortoisesvn_install_10.png)

12. ลองเปิด Explorer ขึ้นมาไปยังโฟลเดอร์ไหนก็ได้ คลิกขวาดู จะเห็นว่ามีเมนูในกลุ่ม SVN เพิ่มขึ้นมา  เอาละครับมาถึงจุดนี้เป็นจุดที่ท่านต้องทราบว่า โปรแกรม TortoiseSVN นั้นไม่เหมือนกับโปรแกรมที่เราลงใช้งานทั่วๆไป ตัวมันเองจะไปฝังเข้ากับ Context Menu เวลาจะใช้งานก็เรียกผ่านทางคลิกขวา ในบทต่อๆไปท่านจะได้เรียนรู้วิธีการใช้งาน และจะรู้สึกคุ้นเคยกับมันมากขึ้น 

    ![](images/chapter4/tortoisesvn_install_11.png)

## Checkout Code ##

**เช็กเอ้าท์** โค้ด คือกระบวนการที่เราไปดึงเอาโค้ดที่เก็บไว้ที่ VisualSVN Server ลงมาที่เครื่องของเราเพื่อทำการแก้ไข และเป็นการสร้างความสัมพันธ์ระหว่าง SVN Server กับ SVN Client เข้าด้วยกัน

1. ให้เปิด VisualSVN Server Manager ขึ้นมาแล้วสร้างโปรเจ็กชื่อ schoolmanagement ขึ้นมา (ผมสมมติเอาว่าท่านกำลังสร้างโปรเจ็กนี้อยู่) วิธีการสร้างอ่านได้จาก  บทที่ 3 จากนั้นคลิกขวาที่โปรเจ็ก schoolmanagement เลือก Copy URL to Clipboard

    ![](images/chapter4/tortoisesvn_checking_out_01.png)

2. เปิด Explorer ขึ้นมา เข้าไปยัง C:\xampp\htdocs\schoolmanagement (หากโฟลเดอร์ schoolmanagement ไม่มีก็สร้างขึ้นมานะครับ ) สำหรับคนที่ไม่ได้ใช้ xampp เป็นตัวพัฒนา PHP ก็ลองเทียบเคียงเอาดูนะครับ  เมื่อเข้าไปในโฟลเดอร์แล้ว ให้คลิกขวา เลือก SVN Checkout...

    ![](images/chapter4/tortoisesvn_checking_out_02.png)

3. ในช่อง URL of repository วาง URL ที่เราก้อปปี้มาจาก VisualSVN Server ในช่อง checkout directory เป็นพาธโฟลเดอร์สำหรับเก็บภาพ แต่ปกติแล้วช่องทั้งสองนี้จะถูกป้อนค่าอัตโนมัติอยู่แล้ว  ส่วนตัวเลือกอื่นๆไม่ต้องเปลี่ยนแปลงอะไร คลิกปุ่ม OK

    ![](images/chapter4/tortoisesvn_checking_out_03.png)

4. รอสักครู่กระบวนการ checking out จะเสร็จเรียบร้อย ให้คลิกปุ่ม OK

    ![](images/chapter4/tortoisesvn_checking_out_04.png)

5. ทีนี้ลองเปิด Explorer ไปที่ C:\xampp\htdocs ดูจะเห็นว่าโฟลเดอร์ schoolmanagement จะมีเครื่องหมายถูกสีเขียวแปะอยู่บนไอคอนโฟลเดอร์ เป็นความหมายว่า โฟลเดอร์นี้โค้ดข้างในใหม่สด  มันจะมีไอคอนอีกหลายแบบ จะเอามาแสดงให้ดูและอธิบายในบทต่อไป

    ![](images/chapter4/tortoisesvn_checking_out_05.png)

6. ลองดับเบิลคลิกเข้าไปยังโฟลเดอร์ schoolmanagement จะเห็นว่าเป็นเพียงโฟลเดอร์เปล่าๆ นั่นเป็นเพราะว่า repository ที่เก็บอยู่บน VisualSVN Server ที่เราเช็กเอ้าท์ลงมา มันยังไม่มีอะไรเก็บไว้ 

    ![](images/chapter4/tortoisesvn_checking_out_06.png)

7. แต่ถ้าหากลองสั่งให้วินโดวมันแสดงทุกอย่างในโฟลเดอร์ schoolmanagement ออกมา

    ![](images/chapter4/tortoisesvn_checking_out_07.png)

8. จะเห็นว่ามีโฟลเดอร์ .svn อยู่ข้างใน โฟลเดอร์นี้เป็นโฟลเดอร์สำคัญ ห้ามลบ เป็นโฟลเดอร์เก็บรายละเอียดต่างๆของ SVN

    ![](images/chapter4/tortoisesvn_checking_out_08.png)

## Commit ไฟล์ ##

การ Commit คือการบันทึกความเปลี่ยนแปลงของไฟล์เก็บไว้ที่ VisualSVN Server ตัว TortoiseSVN มันจะเป็นตัวรวบรวมความเปลี่ยนแปลงต่างๆเอง โค้ดบรรทัดไหนถูกแก้ไข โค้ดบรรทัดไหนถูกลบออกไป หรือมีไฟล์ไหนเพิ่มเข้ามา มีไฟล์ไหนลบออกไป เราเพียงแค่สั่งและเขียนข้อความเตือนความจำ

ผมอยากจะให้ท่านให้ความสำคัญกับข้อความเตือนความจำ ให้มาก เพราะว่าเมื่ออยากจะกลับไปดูว่าตอนนั้นๆเราทำอะไรกับโค้ดไป เราจะได้หาไม่ยาก และอ่านข้อความแล้วเข้าใจสิ่งที่ทำลงไปโดยคร่าวๆ 

1. เพิ่มไฟล์เข้าไปในโฟลเดอร์ C:\xampp\htdocs\schoolmanagement สักไฟล์พร้อมเขียนโค้ดอะไรก็ได้เพื่อเป็นการทดสอบ

2. คลิกขวาบนพื้นที่ว่างๆ จากนั้นคลิก SVN Commit...

    ![](images/chapter4/tortoisesvn_commit_01.png)

3. ในช่อง Changes made เลือกไฟล์ที่เพิ่งเพิ่มเข้าไปเมื่อกี้ มันอาจจะแสดงไฟล์ที่ไม่ต้องการขึ้นมาด้วยเช่นไฟล์ระบบของวินโดว Desktop.ini ไม่ต้องสนใจ จากนั้นในช่อง Message ให้พิมพ์ข้อความเตือนความจำว่าเราทำอะไรลงไปกับโค้ด เสร็จแล้วคลิกปุ่ม OK

    ![](images/chapter4/tortoisesvn_commit_02.png)

4.  ข้อสังเกตอย่างหนึ่งคือหมายเลข revision สังเกตในหน้าจอนะครับ หมายเลข revision นี้จะขยับขึ้นไปเรื่อยๆ เพื่อเป็นการบอกว่าเราได้ทำอะไรกับโค้ดมากแค่ไหน ถ้าเลขมันเยอะมากก็ไม่ต้องตกใจ ปล่อยมันไป 
    
    ทีนี้ให้ลองนึกควานหาโปรแกรมที่ท่านเคยไปดาวน์โหลดจากอินเตอร์เน็ตมา บางโปรแกรมมันมีระบุไว้ด้วยว่า โปรแกรมเวอร์ชั่นเท่าไร revision เท่าไร มันมีที่มาจาก SVN นี่เอง 

    ![](images/chapter4/tortoisesvn_commit_03.png)

5. ลองดูไอค่อนเล็กที่แปะไว้บนไฟล์ จะกลายไปเป็นเครื่องหมายถูกสีเขียว เป็นเครื่องหมายบอกว่า ไฟล์นี้ได้รับการบันทึกการเปลี่ยนแปลงไว้แล้วที่ VisualSVN Server

    ![](images/chapter4/tortoisesvn_commit_04.png)


## อัปเดต working copy ##

Working copy ก็คือโฟลเดอร์โปรเจ็กในเครื่องของเราที่เรา checkout โค้ดมาจาก SVN Server บางคนเรียก Local copy ก็มี

ในกรณีที่เราทำงานร่วมโปรเจ็กเดียวกันหลายคน เราจะรู้ได้ไงว่าคนอื่นเขา commit โค้ดขึ้นไป SVN Server บ้างหรือยัง คำตอบคือไม่รู้ และจริงๆไม่จำเป็นต้องรู้ เราแค่ทำการอัปเดตบ่อยๆ เดี๋ยวโค้ดใน working copy เราก็ถูกอัปเดตเอง

1. คลิกขวาบนพื้นที่ว่างๆ คลิก SVN Update

    ![](images/chapter4/tortoisesvn_update_01.png)

2. ถ้ามีการอัปเดต มันจะแจ้งมาว่ามันอัปเดตไฟล์ไหนบ้างในบรรทัด  Updated และ หมายเลข revision จะเปลี่ยนไป คลิกปุ่ม OK ปิดไดอะลอก

    ![](images/chapter4/tortoisesvn_update_02.png)

    ถ้าหากไม่มีการเปลี่ยนแปลงใดๆ ข้อความในไดอะลอก ก็จะไม่มีบรรทัด Updated

    ![](images/chapter4/tortoisesvn_update_03.png)


## ยกเลิกการเปลี่ยนแปลง ##

นี่เป็นหนึ่งในข้อดีของการนำเอา SVN มาช่วยบริหารงาน คือ เราไม่จำเป็นจะต้องจำว่าเราได้แก้ไขไฟล์ไหนไปบ้าง แก้อะไรไปบ้าง ไม่จำเป็น เราสามารถเล่นกับโค้ดยังไงก็ได้ เมื่อทดสอบจนพอใจแล้ว เราก็แค่ Revert มันซะ การเปลี่ยนแปลงทั้งหมดจะถูกยกเลิก

1. ทดลองแก้ไขโค้ดในไฟล์ จากนั้นคลิกขวาที่ว่างๆ เลือก TortoiseSVN \> Revert...

    ![](images/chapter4/tortoisesvn_revert_01.png) 

2. ติ๊กเลือกไฟล์ที่ต้องการยกเลิกการเปลี่ยนแปลง จากนั้นคลิก OK

    ![](images/chapter4/tortoisesvn_revert_02.png) 

3. คลิกปุ่ม OK เป็นอันเรียบร้อย ลองกลับไปดูโค้ดสิ

    ![](images/chapter4/tortoisesvn_revert_03.png) 


## วิธีจำลองการทำงาน คนๆเดียว ให้เหมือนหลายคน เพื่อศึกษา SVN ##

ถ้าเราเป็นคนๆเดียวที่กำลังศึกษาวิธีการใช้งาน SVN เราคงหาเครื่องมาต่อแลนเข้าด้วยกัน แล้วสมมติเป็นการทำงานร่วมกันหลายคน ลำบากหน่อย เพราะคนๆเดียว ก็คงมีเครื่องๆเดียว  ให้ท่านทำอย่างนี้ครับ checkout โค้ดให้ไปอยู่ที่ต่างๆกัน คือแค่เปลี่ยนชื่อโฟลเดอร์ มันก็กลายเป็น 2 แล้ว แล้วลองแก้ไขไฟล์ commit จาก 2 ที่ดู มันก็จะเหมือนกับคนสองคนทำงานร่วมกันแล้ว พอกล้อมแกล้มสำหรับศึกษาได้ครับ


## แบบฝึกหัด ##

1. ลบโฟลเดอร์ C:\xampp\htdocs\schoolmanagement ทิ้งแล้ว check out มาใหม่ สังเกตดูว่าได้อะไรกลับมา
2. สร้าง Repository ใหม่ชื่อ schoolstock จากนั้น checkout แล้วส่งไฟล์ excel, word, jpg ไปเก็บครั้งละประเภท




## นำไฟล์เข้า Repository ##
ในกรณีที่เรามีไฟล์เก็บอยู่นอกโปรเจ็กจำนวนมาก และต้องการนำมันมาอยู่ในโปรเจ็ก เช่นไฟล์ภาพเป็นต้น เราสามารถทำได้ด้วยกระบวนการสั้นๆ ที่เรียกว่า Import จริงๆแล้วเราจะก้อปปี้มันมาใส่ไว้ในโฟลเดอร์โปรเจ็กแล้วค่อย commit เข้า Repository ก็ให้ผลเหมือนกัน 

จริงๆแล้วหัวข้อนี้ ผมต้องการนำเสนอเพื่อคลายข้อสงสัยต่อคำว่า Import (ปกติผมจะเอาไฟล์เข้า Repository โดยการก้อปปปี้ใส่ไว้ในโฟลเดอร์๋โปรเจ็ก แล้ว commit เอา)

1. คลิกขวาบนโฟลเดอร์ที่ต้องการเอาไฟล์ภายในเข้า Repository เลือก TortoiseSVN \> Import...

    ![](images/chapter4/tortoisesvn_import_01.png)

2. หน้าต่าง Import จะแสดงขึ้นมา ในช่องพาธเราสามารถพิมพ์พาธเข้าไปได้ TortoiseSVN จะสร้างโฟลเดอร์ให้อัตโนมัติหากโฟลเดอร์นั้นๆไม่มีอยู่จริง เสร็จแล้วคลิกปุ่ม OK

    ![](images/chapter4/tortoisesvn_import_02.png)

3. รอสักครู่ไฟล์จะถูก Import เข้าไปใน Repository เรียบร้อย พร้อม +1 หมายเลข Revision

    ![](images/chapter4/tortoisesvn_import_03.png)

4. ลองเปิดเข้าไปดูในโฟลเดอร์โปรเจ็ก จะเห็นว่ายังไม่มีรายการไฟล์ที่เรา Import เข้าไปเมื่อครู่ ไม่แปลก เราต้องทำการอัปเดต Working Folder เสียก่อน

    ![](images/chapter4/tortoisesvn_import_04.png)

5. คลิกขวาที่ว่างๆในโฟลเดอร์โปรเจ็ก เลือก SVN Update...

    ![](images/chapter4/tortoisesvn_import_05.png)

6. เมื่อกระบวนการอัปเดตเสร็จสิ้น เราจะเห็นไฟล์ใหม่ที่ Import เข้าไปใน Repository คลิกปุ่ม OK

    ![](images/chapter4/tortoisesvn_import_06.png)


## export ไฟล์เพื่อนำไปใช้งาน ##

ในโฟลเดอร์ Working Copy ที่เราทำงานอยู่นั้น มันจะมีโฟลเดอร์ของ SVN ซ่อนอยู่ด้วยทำให้บางทีเวลาเราต้องการก้อปปี้ไฟล์ทั้งหมดไปใช้งาน มันจะติดไปด้วย การ export จึงเป็นทางเลือกที่ดีกว่า มันจะไม่เอาไฟล์ SVN ติดมาด้วย 

สังเกตุดูนะครับมีโฟลเดอร์ .svn อยู่ด้วยเป็นสีจางๆ เพราะมันซ่อนอยู่ ถ้าลองเปิดเข้าไปดูภายในโฟลเดอร์จะเห็นไฟล์ประหลาดมากมาย ไม่ต้องสนใจ TortoiseSVN เท่านั้นที่เข้าใจไฟล์เหล่านั้น 

![](images/chapter4/tortoisesvn_export_01.png)

1. คลิกขวาที่ว่างๆใน Working Copy เลือก Export...

    ![](images/chapter4/tortoisesvn_export_02.png)

2. หน้าต่างระบุตำแหน่งที่จะให้เก็บไฟล์ที่จะ Export แสดงขึ้นมา ระบุตำแหน่งที่สะดวกตามความต้องการ จากนั้นคลิกปุ่ม Select Folder

    ![](images/chapter4/tortoisesvn_export_03.png)

3. การ Export จะเร็วหรือช้าขึ้นอยู่กับปริมาณไฟล์ทั้งหมด หลังจาก Export เสร็จแล้วให้ลองเปิดเข้าไปดูในไฟลเดอร์ที่ระบุให้เก็บไฟล์ไว้ จะเห็นไฟล์ใน Working Copy ทั้งหมด ยกเว้นไฟล์ของ SVN

    ![](images/chapter4/tortoisesvn_export_04.png)


## export เฉพาะไฟล์ที่แก้ไข ##

ในบางครั้งเราไม่ได้ต้องการ export ไฟล์ทั้งหมดออกจาก repository เราต้องการเพียงแค่เฉพาะไฟล์ที่ถูกแก้ไขหรือเพิ่มเข้าไปจากช่วง revision นี้ถึง revision นี้ 

1. เข้าไปยัง Working Copy คลิกขวาที่ว่างๆ เลือก TortoiseSVN \> Show log

    ![](images/chapter4/tortoisesvn_export_revision_01.png)

2. หน้าต่าง Log Messages เปิดขึ้นมา ให้คลิกเลือก revision ตั้งต้น และ revision สิ้นสุดที่ต้องการ export ไฟล์ (กดปุ่ม ctrl ไว้นะ) จากนั้นคลิกขวาบนหมายเลข revision ที่เลือกไว้ เลือก Compare revisions 

    ![](images/chapter4/tortoisesvn_export_revision_02.png)

3. หน้าต่าง Changed files แสดงขึ้นมา ให้เลือกรายชื่อไฟล์ทั้งหมดที่ปรากฎ (ctrl+A ไปเลยไม่ต้องสนใจ) จากนั้นคลิกขวา เลือก Export selection to...

    ![](images/chapter4/tortoisesvn_export_revision_03.png)

4. เลือกโฟลเดอร์สำหรับเก็บไฟล์ที่ export 

    ![](images/chapter4/tortoisesvn_export_revision_04.png)

5. หลังจากกระบวนการ export เสร็จเรียบร้อย ลองเปิดเข้าไปดูในโฟลเดอร์ที่เก็บไฟล์ จะเห็นว่าไฟล์

    ![](images/chapter4/tortoisesvn_export_revision_05.png)


## Ignore ไฟล์หรือโฟลเดอร์ ##

ต้องเข้าใจอย่างหนึ่งว่า ไฟล์อะไรก็ตามที่เราทำการ commit เข้า Repository คนอื่นก็จะได้รับการอัปเดตไฟล์นั้นๆไปด้วย ซึ่งในบางครั้งไฟล์ที่เรา commit ไป มันไปตีกับของเดิมของเขา หรือไม่อย่างนั้น ไฟล์นั้นๆก็ไม่ได้จำเป็นที่จะต้องมีใน Repository อย่างเช่น ไฟล์คอนฟิกของอิดีเตอร์ที่ใช้ ถ้าใครเคยใช้ phpstorm จะเห็นชัดเจนว่า phpstorm จะสร้างไฟล์ชื่อ .idea ขึ้นมาในโฟลเดอร์ที่มันทำงาน ไฟล์แบบนี้คนอื่นไม่จำเป็นจะต้องรับทราบว่ามีตัวตน หรือบางทีไฟล์คอนฟิกของโปรแกรมที่เรากำลังเขียนอยู่นี่แหละ เราต้องการป้องกันไม่ให้ใครไปแก้มัน แล้ว commit เข้า Repository 

เราสามารถสั่งข้ามไม่ให้ TortoiseSVN สนใจแม้ไฟล์นั้นๆจะถูกแก้ไข

1. คลิกขวาบนไฟล์ที่ต้องการไม่ให้ TortoiseSVN สนใจ เลือก TortoiseSVN \> Add to ignore list เลือกตัวเลือกใดตัวเลือกหนึ่งในรายการระหว่างระบุชื่อไฟล์ไฟล์เดียว หรือ ระบุเป็นทุกๆไฟล์ที่มีนามสกุลเหมือนกับไฟล์ที่เลือก ส่วนตัวเลือกที่มี recursive พ่วงท้าย หมายถึงให้ TortoiseSVN ไล่หาทั้ง Working Copy ดูว่ามีไฟล์แบบเดียวกันอยู่อีกหรือไม่

    ![](images/chapter4/tortoisesvn_ignorefile_01.png)

2. เมื่อไฟล์ถูกใส่เข้าไปใน Ignore list แล้ว สังเกตว่าตัวไอคอนของไฟล์จะมีเครื่องหมายลบสีเทาๆแปะไว้ให้ทราบด้วยว่าไฟล์นี้ถูก Ignore เสร็จแล้วคลิกปุ่ม OK เป็นอันเรียบร้อย 

    ![](images/chapter4/tortoisesvn_ignorefile_02.png)


## ยกเลิก Ignore ไฟล์หรือโฟลเดอร์ ##

หลังจากที่เราสั่ง Ignore ไฟล์ใดไฟล์หนึ่งหรือโฟลเดอร์ใดๆไปแล้ว เราสามารถยกเลิกได้ โดย

1. คลิกขวาบนไฟล์ที่ถูก Ignore ไว้ เลือก TortoiseSVN \> Remove from ignore list

    ![](images/chapter4/tortoisesvn_unignore_01.png)

2. สังเกตดูจากไอคอนเล็กๆที่ติดอยู่ที่ไอคอนไฟล์ จากเมื่อก่อนมันเป็นเครื่องหมายลบสีเทาๆ กลับกลายมาเป็นเครื่องหมาย คำถามสีน้ำเงิน นั่นเป็นเครื่องหมายว่าไฟล์นี้พร้อมถูก Commit เพื่อแชร์ความเปลี่ยนแปลงของตัวเองไปให้โปรแกรมเมอร์คนอื่นได้ทราบ คลิกปุ่ม OK

    ![](images/chapter4/tortoisesvn_unignore_02.png)


## ดูความเปลี่ยนแปลงของโค้ด ##

มีบางครั้งที่เราอยากจะรู้ว่าที่ผ่านมา เราได้ทำอะไรลงไปกับไฟล์นั้นๆบ้าง เขียนโค้ดอะไรลงไปบ้าง 

1. คลิกขวาบนไฟล์ที่ต้องการดูความเปลี่ยนแปลง เลือก TortoiseSVN \> Diff with previous version 

    ![](images/chapter4/tortoisesvn_diff_01.png)

2. หน้าต่างเปรียบเทียบการเปลี่ยนแปลงแสดงขึ้นมา ในหน้าต่าง Working Copy คือโค้ดปัจจุบัน ส่วนอีกฝั่งหนึ่งคือโค้ดใน revision นั้นๆ ที่เอามาเปรียบ วิธีการอ่านง่ายๆเป็นดังนี้ ดูตรงไอค่อนเล็กๆหน้าบรรทัด มันจะเป็นเครื่องหมายลบเครื่องหมายบวกอยู่ ให้อ่านจากหน้าต่างซ้ายมาหน้าต่างขวา ถ้าอย่างในตัวอย่างจะอ่านได้ว่า ลบ 3 บรรทัด ทิ้ง เพิ่มบรรทัด phpinfo() เข้ามา

    ![](images/chapter4/tortoisesvn_diff_02.png)

ยังมีวิธีดูความเปลี่ยนแปลงโค้ดอีกวิธีหนึ่ง ให้ทำดังนี้ 

1. คลิกขวาเลือก TortoiseSVN \> Show log

    ![](images/chapter4/tortoisesvn_diff_03.png)

2. หน้าต่าง Log Messages แสดงขึ้นมา คลิกเลือก revision อย่างน้อย 2 revision เพื่อทำการเปรียบเทียบ จากนั้นคลิกขวา เลือก Compare revisions

    ![](images/chapter4/tortoisesvn_diff_04.png)

3. หน้าต่างที่แสดงอยู่คือหน้าต่างที่แสดงให้เราได้เห็นว่าโค้ดมีอะไรเปลี่ยนแปลงไปบ้าง 

    ![](images/chapter4/tortoisesvn_diff_05.png)


## ตรวจดูใครแก้ไขโค้ดบรรทัดไหนไป ##

ฟีเจอร์นี้ค่อนข้างจะมีประโยชน์มาก ลดการถกเถียงกันว่าใครเป็นคนแก้โค้ดตรงส่วนนั้นส่วนนี้ทำให้เกิดบั๊ก ประโยชน์อีกอย่างหนึ่งก็คือ ในยามที่เรามานั่งดูโค้ดแล้วสงสัยว่าโค้ดนั้นๆเขียนขึ้นมาเพื่ออะไร หรือทำไมต้องเขียนอย่างนั้น เราก็แค่ดูว่าใครเป็นคนเขียน สามารถถามเจ้าตัวโดยตรงเพื่อรับคำอธิบาย 

1. คลิกขวาบนไฟล์ที่ต้องการดู เลือก TortoiseSVN \> Blame...  

    ![](images/chapter4/tortoisesvn_blame_01.png)

2. ระบุ revision เริ่มต้นและสิ้นสุด แต่ปกติแล้วดีฟอลต์จะให้มาที่ revision ที่ 1 และ revision ปัจจุบัน ส่วนตัวเลือกอื่นๆไม่จำเป็นต้องเปลี่ยนแปลงอะไร หรือหากต้องการทราบว่าจะเกิดอะไร ก็สามารถลองเลือกลองเล่นได้  จากนั้นคลิกปุ่ม OK

    ![](images/chapter4/tortoisesvn_blame_02.png)

3. หน้าต่าง TortoiseBlame ถูกเปิดขึ้นมาและแสดงให้เห็นว่าแต่ละบรรทัดใครเป็นคนแก้ ไปเมื่อ revision ที่เท่าไร หากเอาเมาส์ชี้ที่หมายเลข revision รายละเอียดจะถูกแสดงขึ้นมาให้เห็นว่าโค้ดบรรทัดนั้นๆ แก้ไปเพราะอะไร และเมื่อไร โน๊ตทีเห็นคือคอมเม้นท์ที่เราเขียนไว้ตอน commit โค้ด 

    ![](images/chapter4/tortoisesvn_blame_03.png)


## การขอ lock ไฟล์ ##

ฟังก์ชั่นตัวนี้หากคลิกขวาที่ไฟล์ใดๆแล้วเลือก TortoiseSVN \> Get lock... ก็จะเห็น มันเป็นฟังก์ชั่นที่ใช้สำหรับล้อกไฟล์ห้ามใครแก้ไขจนกว่าเราจะ commit ไฟล์นี้เสร็จ หรือจนกว่าเราจะยกเลิกการล้อก 

![](images/chapter4/tortoisesvn_getlock_01.png)

หน้าต่างสำหรับป้อนข้อความให้แสดงเมื่อมีคนอื่นจะแก้ไขไฟล์ ป้อนข้อความให้คนอื่นอ่านแล้วเข้าใจว่าทำไมต้องล้อกไฟล์ จากนั้นคลิก OK
![](images/chapter4/tortoisesvn_getlock_02.png)

แต่อย่างไรก็ตาม เพื่อเป็นการป้องกันกรณีที่มีคนล้อกไฟล์ไว้แล้วลืม แล้วเจ้าตัวก็ดันไม่อยู่ TortoiseSVN อนุญาติให้มีการ Steal lock ได้ คือยึดสิทธิ์การล้อกไฟล์มาเป็นของตัวเอง

คลิกขวาที่ไฟล์เลือก TortoiseSVN \> Get lock

![](images/chapter4/tortoisesvn_getlock_03.png)

ในหน้าต่าง Get lock ให้ติ๊กเครื่องหมายถูกหน้า Steal lock

![](images/chapter4/tortoisesvn_getlock_04.png)


## การปลด lock ไฟล์ ##

โดยปกติการล้อกไฟล์จะถูกยกเลิกอัตโนมัติเมื่อเราทำการ commit ไฟล์ไปครั้งหนึ่ง แต่หากไม่มีการ commit แล้วต้องการยกเลิกการล้อกไฟล์ สามารถทำได้โดย

1. คลิกขวาบนไฟล์ที่ถูกล้อก เลือก TortoiseSVN \> Release lock...

    ![](images/chapter4/tortoisesvn_releaselock_01.png)

2. เลือกไฟล์ที่ต้องการปลดล้อก ซึ่งปกติมันก็เลือกถูกต้องอยู่แล้ว คลิกปุ่ม OK

    ![](images/chapter4/tortoisesvn_releaselock_02.png)

3. การปลดล้อกเสร็จเรียบร้อย คลิกปุ่ม OK

    ![](images/chapter4/tortoisesvn_releaselock_03.png)

## Create patch ##

## Apply patch ##

## Resolve Conflict ##